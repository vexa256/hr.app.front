<template>
  <v-container>
    <!-- Search and Export Bar -->
    <v-row class="mb-5">
      <v-col cols="12" md="4">
        <v-text-field v-model="search" label="Search" outlined dense></v-text-field>
      </v-col>

      <v-col cols="12" md="8" class="text-right">
        <v-btn color="info" class="mx-2 elevated-btn" @click="exportToPDF">
          <v-icon right>mdi-file-excel</v-icon>
        </v-btn>

        <v-btn color="deep-purple accent-4" class="mx-2 elevated-btn" @click="toggleGroup">
          {{ currentGroup }}
          <v-icon right>mdi-table</v-icon>
        </v-btn>
      </v-col>
    </v-row>

    <!-- Table for Basic Information -->
    <v-card v-if="currentGroup === 'Basic Info'" class="my-5">
      <v-card-title class="headline">Basic Information</v-card-title>
      <v-table>
        <thead>
          <tr>
            <th class="text-left">Name</th>
            <th class="text-left">Email</th>
            <th class="text-left">Phone Number</th>
            <th class="text-left">Date of Birth</th>
            <th class="text-left">Gender</th>
            <th class="text-left">Address</th>
            <th class="text-left">City</th>
            <th class="text-left">Country</th>
            <th class="text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="item in paginatedDataBasic" :key="item.UserID">
            <td>{{ item.Name }}</td>
            <td>{{ item.Email }}</td>
            <td>{{ item.PhoneNumber }}</td>
            <td>{{ item.DateOfBirth }}</td>
            <td>{{ item.Gender }}</td>
            <td>{{ item.Address }}</td>
            <td>{{ item.City }}</td>
            <td>{{ item.Country }}</td>
            <td>
              <v-btn @click="editEmployee(item)" icon class="mr-2">
                <v-icon>mdi-pencil</v-icon>
              </v-btn>
              <v-btn @click="updateEmployee(item)" icon>
                <v-icon>mdi-check</v-icon>
              </v-btn>
            </td>
          </tr>
        </tbody>
      </v-table>
      <v-pagination v-model="pageBasic" :length="totalPagesBasic" circle color="purple"></v-pagination>
    </v-card>

    <!-- Table for Other Info -->
    <v-card v-if="currentGroup === 'Other Info'">
      <v-card-title class="headline">Other Info</v-card-title>
      <v-table>
        <thead>
          <tr>
            <th class="text-left">Employee Type</th>
            <th class="text-left">Bank Acc No.</th>
            <th class="text-left">Bank Acc Name</th>
            <th class="text-left">Bank Name</th>
            <th class="text-left">Salary (USD)</th>
            <th class="text-left">Taxable Salary (USD)</th>
            <th class="text-left">Date of Joining</th>
            <th class="text-left">Contract Validity (Months)</th>
            <th class="text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="item in paginatedDataFinancial" :key="item.UserID">
            <td>{{ item.EmployeeType }}</td>
            <td>{{ item.BankAccountNumber }}</td>
            <td>{{ item.BankAccountName }}</td>
            <td>{{ item.BankName }}</td>
            <td>{{ item.SalaryPerMonthInUsd }}</td>
            <td>{{ item.TaxableSalaryAmountInUsd }}</td>
            <td>{{ item.DateOfJoining }}</td>
            <td>{{ item.ContractValidityInMonths }}</td>
            <td>
              <v-btn @click="editEmployee(item.id)" icon class="mr-2">
                <v-icon>mdi-pencil</v-icon>
              </v-btn>
              <v-btn @click="updateEmployee(item)" icon>
                <v-icon>mdi-check</v-icon>
              </v-btn>
            </td>
          </tr>
        </tbody>
      </v-table>
      <v-pagination v-model="pageFinancial" :length="totalPagesFinancial" circle color="purple"></v-pagination>
    </v-card>
  </v-container>
</template>

<script>
import axios from 'axios';
import * as XLSX from 'xlsx';

export default {
  data() {
    return {
      employees: [],
      search: '',
      currentGroup: 'Basic Info',
      pageBasic: 1,
      pageFinancial: 1,
      itemsPerPage: 5,
      isUpdateDialogOpen: false,

    };
  },
  computed: {
    paginatedDataBasic() {
      const start = (this.pageBasic - 1) * this.itemsPerPage;
      const end = start + this.itemsPerPage;
      return this.filteredData.slice(start, end);
    },
    paginatedDataFinancial() {
      const start = (this.pageFinancial - 1) * this.itemsPerPage;
      const end = start + this.itemsPerPage;
      return this.filteredData.slice(start, end);
    },
    filteredData() {
      if (!this.search) return this.employees;
      return this.employees.filter(item =>
        Object.values(item).some(value =>
          value.toString().toLowerCase().includes(this.search.toLowerCase())
        )
      );
    },
    totalPagesBasic() {
      return Math.ceil(this.filteredData.length / this.itemsPerPage);
    },
    totalPagesFinancial() {
      return Math.ceil(this.filteredData.length / this.itemsPerPage);
    },
  },
  methods: {
    toggleUpdateDialog(employee) {
      this.selectedEmployee = { ...employee };
      this.isUpdateDialogOpen = !this.isUpdateDialogOpen;
    },

    closeUpdateDialog() {
      this.isUpdateDialogOpen = false;
    },
    toggleGroup() {
      this.currentGroup = this.currentGroup === 'Basic Info' ? 'Other Info' : 'Basic Info';
    },
    fetchData() {
      axios.get(`${window.SERVER_URL}GetEmployees`)
        .then(response => {
          if (response.data.status === 'success') {
            this.employees = response.data.data;
          } else {
            console.error("Error: Server returned an unsuccessful status.");
          }
        })
        .catch(error => {
          console.error("Error fetching data:", error);
        });
    },
    exportToPDF() {
      const data = this.employees.map(emp => ({
        // ... (Existing data mapping)
      }));

      const worksheet = XLSX.utils.json_to_sheet(data);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Employees");

      // Writing the workbook to a file
      XLSX.writeFile(workbook, "employees.xlsx");
    },
    editEmployee(id) {
      // Add logic to handle editing employee information
      // For example, storing the selected employee ID in sessionStorage
      sessionStorage.setItem('SelectedEmployeeID', id);

      // Using the latest Vue Router syntax for navigation
      this.$router.push({ name: 'UpdateForm' });
    },

    updateEmployee(employee) {
      // Add logic to handle updating employee information
      console.log(`Updating employee: ${employee.Name}`);
    },
  },
  mounted() {
    this.fetchData();
  },
};
</script>

<style scoped>
.elevated-btn {
  transition: transform 0.2s ease-in-out;
}

.elevated-btn:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
}

.elevated-btn .v-icon {
  transition: transform 0.3s ease;
}

.elevated-btn:hover .v-icon {
  transform: rotate(360deg);
}
</style>
